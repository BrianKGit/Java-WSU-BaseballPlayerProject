/*
 * Author:      Brian Klein
 * Date:        10/30/17
 * Program:     BaseballPlayerGUI.java
 * Description: GUI program that can calculate, sort, and search the players' 
 *              stats.
 */

import java.io.*;
import java.util.*;
import javax.swing.*;

public class BaseballPlayerGUI extends javax.swing.JFrame {

    private String fileName;
    static ArrayList<BaseballPlayer> playerList = new ArrayList<BaseballPlayer>();

    /**
     * Creates new form BaseballPlayerGUI
     */
    public BaseballPlayerGUI() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        resultArea = new javax.swing.JTextArea();
        loadDataButton = new javax.swing.JButton();
        searchButton = new javax.swing.JButton();
        resetButton = new javax.swing.JButton();
        exitButton = new javax.swing.JButton();
        firstNameBox = new javax.swing.JComboBox<>();
        lastNameBox = new javax.swing.JComboBox<>();
        gamesPlayedBox = new javax.swing.JComboBox<>();
        atBatBox = new javax.swing.JComboBox<>();
        runBox = new javax.swing.JComboBox<>();
        hitBox = new javax.swing.JComboBox<>();
        battingAvgBox = new javax.swing.JComboBox<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        resultArea.setColumns(20);
        resultArea.setFont(new java.awt.Font("Courier New", 0, 13)); // NOI18N
        resultArea.setRows(5);
        jScrollPane1.setViewportView(resultArea);

        loadDataButton.setText("Load Data");
        loadDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadDataButtonActionPerformed(evt);
            }
        });

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitButtonActionPerformed(evt);
            }
        });

        firstNameBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "First Name", "A-Z", "Z-A" }));
        firstNameBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                firstNameBoxActionPerformed(evt);
            }
        });

        lastNameBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Last Name", "A-Z", "Z-A" }));
        lastNameBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lastNameBoxActionPerformed(evt);
            }
        });

        gamesPlayedBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Games Played", "Ascending", "Descending" }));
        gamesPlayedBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                gamesPlayedBoxActionPerformed(evt);
            }
        });

        atBatBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "At Bats", "Ascending", "Descending" }));
        atBatBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atBatBoxActionPerformed(evt);
            }
        });

        runBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Runs", "Ascending", "Descending" }));
        runBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runBoxActionPerformed(evt);
            }
        });

        hitBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Hits", "Ascending", "Descending" }));
        hitBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hitBoxActionPerformed(evt);
            }
        });

        battingAvgBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Batting Avg", "Ascending", "Descending" }));
        battingAvgBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                battingAvgBoxActionPerformed(evt);
            }
        });

        textArea.setColumns(20);
        textArea.setRows(5);
        jScrollPane2.setViewportView(textArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(loadDataButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(resetButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(firstNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lastNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(gamesPlayedBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(atBatBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(runBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(hitBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(battingAvgBox, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gamesPlayedBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lastNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(firstNameBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(atBatBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(runBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(hitBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(battingAvgBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(loadDataButton, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(resetButton, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
                            .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(15, 15, 15))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadDataButtonActionPerformed

        //create a JFileChooser object
        JFileChooser openChooser = new JFileChooser("./"); //current folder

        int status = openChooser.showOpenDialog(null);

        if (status == JFileChooser.APPROVE_OPTION) { //open button
            fileName = openChooser.getSelectedFile().getAbsolutePath();

            resultArea.append(fileName + " is selected.");
        }
        //read data file
        try {
            Scanner inFile = new Scanner(new FileReader(fileName));

            //remove the data file heading
            for (int i = 0; i < 6; i++) {
                inFile.next();
            }

            //read data
            int count = 0;
            int totalHits = 0;
            int totalAtBats = 0;
            while (inFile.hasNext()) {
                String firstName = inFile.next();
                String lastName = inFile.next();
                int gamesPlayed = inFile.nextInt();
                int atBats = inFile.nextInt();
                int runs = inFile.nextInt();
                int hits = inFile.nextInt();

                //create an object and place it into the array
                playerList.add(new BaseballPlayer(firstName, lastName, gamesPlayed, atBats, runs, hits));

                resultArea.append(playerList.get(count).toString());

                count++;
                totalHits += hits;
                totalAtBats += atBats;

            }//end while

            double totalAvg = totalHits / (double) totalAtBats;

            textArea.append("\nTotal number of players: " + count);
            textArea.append("\nTotal team hits: " + totalHits);
            textArea.append("\nTotal team at bats: " + totalAtBats);
            textArea.append(String.format("\nTeam batting average : %.3f", totalAvg));

        } catch (FileNotFoundException e) {

        } catch (Exception e) {//ask Jim

        }
    }//GEN-LAST:event_loadDataButtonActionPerformed

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed

        String key = JOptionPane.showInputDialog("Enter the last name of a player: ");

        int foundIndex = binarySearch(playerList, key, 0, playerList.size() - 1);

        if (foundIndex == -1) {
            JOptionPane.showMessageDialog(null, key + " is not found.");
        } else {
            JOptionPane.showMessageDialog(null, playerList.get(foundIndex).toString());
        }
    }//GEN-LAST:event_searchButtonActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        resultArea.setText("");
        textArea.setText("");
    }//GEN-LAST:event_resetButtonActionPerformed

    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitButtonActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitButtonActionPerformed

    private void firstNameBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_firstNameBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_firstNameBoxActionPerformed

    private void lastNameBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lastNameBoxActionPerformed
        int x = lastNameBox.getSelectedIndex();
        if (x == 1) {
            quickSortByName(playerList, 0, playerList.size() - 1);
            resultArea.setText("");
            for (int i = 0; i < playerList.size(); i++) {
                resultArea.append(playerList.get(i).toString());
            }
        } else if (x == 2) {
            selectionSortByName(playerList);
            resultArea.setText("");
            for (int i = 0; i < playerList.size(); i++) {
                resultArea.append(playerList.get(i).toString());
            }
        }

    }//GEN-LAST:event_lastNameBoxActionPerformed

    private void gamesPlayedBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_gamesPlayedBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_gamesPlayedBoxActionPerformed

    private void atBatBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atBatBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_atBatBoxActionPerformed

    private void runBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_runBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_runBoxActionPerformed

    private void hitBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hitBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hitBoxActionPerformed

    private void battingAvgBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_battingAvgBoxActionPerformed
        int x = battingAvgBox.getSelectedIndex();
        if (x == 1) {
            quickSortByAvg(playerList, 0, playerList.size() - 1);
            resultArea.setText(playerList.toString());
        } else if (x == 2) {
            selectionSortByAvg(playerList);
            resultArea.setText(playerList.toString());
        }
    }//GEN-LAST:event_battingAvgBoxActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BaseballPlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BaseballPlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BaseballPlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BaseballPlayerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BaseballPlayerGUI().setVisible(true);
            }
        });
    }

    //quick sort method
    public static void quickSortByName(ArrayList<BaseballPlayer> list, int left, int right) {

        if (left < right) {
            int q = partitionByName(playerList, left, right);
            quickSortByName(list, left, q);
            quickSortByName(list, q + 1, right);
        }
    }

    //partition method
    public static int partitionByName(ArrayList<BaseballPlayer> list, int left, int right) {

        BaseballPlayer x = playerList.get(left); //pivot
        int i = left - 1;
        int j = right + 1;

        while (true) {

            j--;
            while (playerList.get(j).getLastName().compareTo(x.getLastName()) > 0) {
                j--;
            }

            i++;
            while (playerList.get(i).getLastName().compareTo(x.getLastName()) < 0) {
                i++;
            }

            if (i < j) { //swap list[i] with list[j]
                BaseballPlayer temp = playerList.get(j);
                playerList.set(j, playerList.get(i));
                playerList.set(i, temp);
            } else {
                return j;
            }

        }//end outer while

    }//end partition

    //binary search using recursion
    public static int binarySearch(ArrayList<BaseballPlayer> list, String key, int left, int right) {
        quickSortByName(playerList, 0, playerList.size() - 1);

        int middle = (left + right) / 2;

        int foundIndex = -1;

        if (key.compareTo(list.get(middle).getLastName()) == 0) {
            foundIndex = middle;
        } else if (key.compareTo(list.get(middle).getLastName()) < 0) {
            if (left <= middle - 1) {
                foundIndex = binarySearch(list, key, left, middle - 1);// further search on the left
            }
        } else if (key.compareTo(list.get(middle).getLastName()) > 0) {
            if (right >= middle + 1) {
                foundIndex = binarySearch(list, key, middle + 1, right);//further search on the right
            }
        }

        return foundIndex;

    }//end binarySearch method

    public static void selectionSortByName(ArrayList<BaseballPlayer> playerList) {
        int startScan;   // Starting position of the scan
        int index;       // To hold a subscript value
        int maxIndex;    // Element with smallest value in the scan
        String maxValue;    // The smallest value found in the scan

        // The outer loop iterates once for each element in the
        // array. The startScan variable marks the position where
        // the scan should begin.
        for (startScan = 0; startScan < (playerList.size() - 1); startScan++) {
            // Assume the first element in the scannable area
            // is the smallest value.
            maxIndex = startScan;
            maxValue = playerList.get(startScan).getLastName();

            // Scan the array, starting at the 2nd element in
            // the scannable area. We are looking for the smallest
            // value in the scannable area. 
            for (index = startScan + 1; index < playerList.size(); index++) {
                if (playerList.get(index).getLastName().compareTo(maxValue) > 0) {
                    maxValue = playerList.get(index).getLastName();
                    maxIndex = index;
                }
            }

            // Swap the element with the smallest value 
            // with the first element in the scannable area.
            BaseballPlayer temp = playerList.get(startScan);
            playerList.set(startScan, playerList.get(maxIndex));
            playerList.set(maxIndex, temp);
        }
    }

    public static void selectionSortByAvg(ArrayList<BaseballPlayer> playerList) {
        int startScan;   // Starting position of the scan
        int index;       // To hold a subscript value
        int maxIndex;    // Element with largest value in the scan
        double maxValue;    // The largest value found in the scan

        // The outer loop iterates once for each element in the
        // array. The startScan variable marks the position where
        // the scan should begin.
        for (startScan = 0; startScan < (playerList.size() - 1); startScan++) {
            // Assume the first element in the scannable area
            // is the smallest value.
            maxIndex = startScan;
            maxValue = playerList.get(startScan).calculateBattingAvg();

            // Scan the array, starting at the 2nd element in
            // the scannable area. We are looking for the smallest
            // value in the scannable area. 
            for (index = startScan + 1; index < playerList.size(); index++) {
                if (playerList.get(index).calculateBattingAvg() > maxValue) {
                    maxValue = playerList.get(index).calculateBattingAvg();
                    maxIndex = index;
                }
            }

            // Swap the element with the smallest value 
            // with the first element in the scannable area.
            BaseballPlayer temp = playerList.get(startScan);
            playerList.set(startScan, playerList.get(maxIndex));
            playerList.set(maxIndex, temp);
        }
    }

    //quick sort method
    public static void quickSortByAvg(ArrayList<BaseballPlayer> list, int left, int right) {

        if (left < right) {
            int q = partitionByAvg(playerList, left, right);
            quickSortByAvg(list, left, q);
            quickSortByAvg(list, q + 1, right);
        }
    }

    //partition method
    public static int partitionByAvg(ArrayList<BaseballPlayer> list, int left, int right) {

        BaseballPlayer x = playerList.get(left); //pivot
        int i = left - 1;
        int j = right + 1;

        while (true) {

            j--;
            while (playerList.get(j).calculateBattingAvg() > x.calculateBattingAvg()) {
                j--;
            }

            i++;
            while (playerList.get(i).calculateBattingAvg() < x.calculateBattingAvg()) {
                i++;
            }

            if (i < j) { //swap 
                BaseballPlayer temp = playerList.get(j);
                playerList.set(j, playerList.get(i));
                playerList.set(i, temp);
            } else {
                return j;
            }

        }//end outer while

    }//end partition

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> atBatBox;
    private javax.swing.JComboBox<String> battingAvgBox;
    private javax.swing.JButton exitButton;
    private javax.swing.JComboBox<String> firstNameBox;
    private javax.swing.JComboBox<String> gamesPlayedBox;
    private javax.swing.JComboBox<String> hitBox;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> lastNameBox;
    private javax.swing.JButton loadDataButton;
    private javax.swing.JButton resetButton;
    private javax.swing.JTextArea resultArea;
    private javax.swing.JComboBox<String> runBox;
    private javax.swing.JButton searchButton;
    private javax.swing.JTextArea textArea;
    // End of variables declaration//GEN-END:variables
}
